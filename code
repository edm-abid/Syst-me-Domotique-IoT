// Définition des broches
#define PIR_PIN 3         // Broche du capteur de présence (PIR)
#define LAMP_PIN 4        // Broche de la lampe (LED)
#define DEVICE_PIN 5      // Broche des appareils électroniques (LED)
#define FAN_PIN 6         // Broche du ventilateur (moteur DC)

// Seuil de température pour activer le ventilateur
#define TEMP_THRESHOLD 25

// Configuration WiFi et ThingSpeak
String ssid = "Simulator Wifi";  // SSID du réseau WiFi
String password = "";            // Pas de mot de passe pour le WiFi virtuel
String host = "api.thingspeak.com"; // Serveur ThingSpeak
const int httpPort = 80;          // Port HTTP pour la connexion

// Variables globales
float temperature = 0.0;          // Température simulée

// Initialisation de l'ESP8266
void setupESP8266() {
  Serial.begin(115200);  // Démarrage de la communication série avec l'ESP8266
  delay(1000);           // Attente pour l'initialisation

  // Vérification de l'ESP8266
  Serial.println("AT");
  delay(1000);
  if (!Serial.find("OK")) {
    Serial.println("Erreur : ESP8266 non détecté.");
    while (1); // Bloquer si l'ESP8266 ne répond pas
  }

  // Connexion au WiFi
  Serial.println("AT+CWJAP=\"" + ssid + "\",\"" + password + "\"");
  delay(5000);
  if (!Serial.find("OK")) {
    Serial.println("Erreur : Connexion WiFi échouée.");
    while (1); // Bloquer si la connexion échoue
  }

  // Connexion au serveur ThingSpeak
  Serial.println("AT+CIPSTART=\"TCP\",\"" + host + "\"," + String(httpPort));
  delay(1000);
  if (!Serial.find("OK")) {
    Serial.println("Erreur : Connexion au serveur ThingSpeak échouée.");
    while (1); // Bloquer si la connexion échoue
  }
}

// Envoi des données à ThingSpeak
void sendData(float temperature, bool presence, int lampState, int deviceState, int fanState) {
  // Construction de l'URL pour la requête HTTP
  String url = "/update?api_key=FH0C8EXHVZ7YXO3X";
  url += "&field1=" + String(temperature);
  url += "&field2=" + String(presence);
  url += "&field3=" + String(lampState);
  url += "&field4=" + String(deviceState);
  url += "&field5=" + String(fanState);

  // Construction de la requête HTTP
  String httpPacket = "GET " + url + " HTTP/1.1\r\n";
  httpPacket += "Host: " + host + "\r\n";
  httpPacket += "Connection: close\r\n\r\n";

  // Envoi de la longueur de la requête
  Serial.print("AT+CIPSEND=");
  Serial.println(httpPacket.length());
  delay(1000);

  // Envoi de la requête HTTP
  if (Serial.find(">")) {
    Serial.print(httpPacket);
    delay(1000);
    if (Serial.find("SEND OK")) {
      Serial.println("Données envoyées à ThingSpeak avec succès !");
    } else {
      Serial.println("Erreur : Échec de l'envoi des données.");
    }
  } else {
    Serial.println("Erreur : Préparation de l'envoi échouée.");
  }
}

// Configuration initiale
void setup() {
  // Configuration des broches
  pinMode(PIR_PIN, INPUT);
  pinMode(LAMP_PIN, OUTPUT);
  pinMode(DEVICE_PIN, OUTPUT);
  pinMode(FAN_PIN, OUTPUT);

  // Initialisation de l'ESP8266
  setupESP8266();

  // Démarrage de la communication série
  Serial.println("Système domotique initialisé.");
}

// Boucle principale
void loop() {
  // Simulation de la température (entre 15.0 et 35.0 °C)
  temperature = random(150, 351) / 10.0;

  // Lecture du capteur de présence
  bool presence = digitalRead(PIR_PIN);

  // Logique de contrôle des actionneurs
  if (presence) {
    digitalWrite(LAMP_PIN, HIGH);
    digitalWrite(DEVICE_PIN, HIGH);
  } else {
    digitalWrite(LAMP_PIN, LOW);
    digitalWrite(DEVICE_PIN, LOW);
  }

  // Contrôle du ventilateur en fonction de la température
  if (temperature > TEMP_THRESHOLD) {
    digitalWrite(FAN_PIN, HIGH);
  } else {
    digitalWrite(FAN_PIN, LOW);
  }

  // Envoi des données à ThingSpeak
  sendData(temperature, presence, digitalRead(LAMP_PIN), digitalRead(DEVICE_PIN), digitalRead(FAN_PIN));

  // Délai pour la stabilité (1 seconde)
  delay(1000);
}
